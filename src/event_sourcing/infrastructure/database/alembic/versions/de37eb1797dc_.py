"""empty message

Revision ID: de37eb1797dc
Revises:
Create Date: 2025-06-23 04:13:20.118539

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "de37eb1797dc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "client",
        sa.Column(
            "aggregate_id", postgresql.UUID(as_uuid=True), nullable=False
        ),
        sa.Column("external_id", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=500), nullable=True),
        sa.Column("parent_id", sa.String(length=255), nullable=True),
        sa.Column("status", sa.String(length=100), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_client_name", "client", ["name"], unique=False)
    op.create_index("idx_client_parent", "client", ["parent_id"], unique=False)
    op.create_index("idx_client_status", "client", ["status"], unique=False)
    op.create_index(
        op.f("ix_client_aggregate_id"), "client", ["aggregate_id"], unique=True
    )
    op.create_index(op.f("ix_client_id"), "client", ["id"], unique=False)
    op.create_index(op.f("ix_client_name"), "client", ["name"], unique=False)
    op.create_index(
        op.f("ix_client_parent_id"), "client", ["parent_id"], unique=False
    )
    op.create_index(
        op.f("ix_client_status"), "client", ["status"], unique=False
    )

    op.create_table(
        "event",
        sa.Column("event_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "aggregate_id", postgresql.UUID(as_uuid=True), nullable=False
        ),
        sa.Column("external_id", sa.String(length=255), nullable=False),
        sa.Column("aggregate_type", sa.String(length=100), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "CLIENT_CREATED",
                "CLIENT_UPDATED",
                "CLIENT_DELETED",
                "PROJECTION_CREATED",
                "PROJECTION_UPDATED",
                "SNAPSHOT_CREATED",
                "SNAPSHOT_UPDATED",
                "SNAPSHOT_DELETED",
                "SYSTEM_ERROR",
                "SYSTEM_WARNING",
                name="eventtype",
            ),
            nullable=False,
        ),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("version", sa.String(length=50), nullable=False),
        sa.Column(
            "data", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "event_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "validation_info",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "source",
            sa.Enum("SALESFORCE", name="eventsourceenum"),
            nullable=False,
        ),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    # Composite index for external ID + source lookups (for finding existing aggregates)
    op.create_index(
        "idx_external_id_source",
        "event",
        ["external_id", "source"],
        unique=False,
    )
    op.create_index(
        "idx_aggregate_events",
        "event",
        ["aggregate_id", "aggregate_type", "timestamp"],
        unique=False,
    )
    op.create_index("idx_event_source", "event", ["source"], unique=False)
    op.create_index(
        "idx_event_timestamp", "event", ["timestamp"], unique=False
    )
    op.create_index("idx_event_type", "event", ["event_type"], unique=False)
    op.create_index(
        op.f("ix_event_aggregate_id"), "event", ["aggregate_id"], unique=False
    )
    op.create_index(
        op.f("ix_event_aggregate_type"),
        "event",
        ["aggregate_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_event_event_id"), "event", ["event_id"], unique=True
    )
    op.create_index(
        op.f("ix_event_event_type"), "event", ["event_type"], unique=False
    )
    op.create_index(op.f("ix_event_id"), "event", ["id"], unique=False)
    op.create_index(op.f("ix_event_source"), "event", ["source"], unique=False)
    op.create_index(
        op.f("ix_event_timestamp"), "event", ["timestamp"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_event_timestamp"), table_name="event")
    op.drop_index(op.f("ix_event_source"), table_name="event")
    op.drop_index(op.f("ix_event_id"), table_name="event")
    op.drop_index(op.f("ix_event_event_type"), table_name="event")
    op.drop_index(op.f("ix_event_event_id"), table_name="event")
    op.drop_index(op.f("ix_event_aggregate_type"), table_name="event")
    op.drop_index(op.f("ix_event_aggregate_id"), table_name="event")
    op.drop_index("idx_event_type", table_name="event")
    op.drop_index("idx_event_timestamp", table_name="event")
    op.drop_index("idx_event_source", table_name="event")
    op.drop_index("idx_aggregate_events", table_name="event")
    op.drop_index("idx_external_id_source", table_name="event")
    op.drop_table("event")
    op.drop_index(op.f("ix_client_status"), table_name="client")
    op.drop_index(op.f("ix_client_parent_id"), table_name="client")
    op.drop_index(op.f("ix_client_name"), table_name="client")
    op.drop_index(op.f("ix_client_id"), table_name="client")
    op.drop_index(op.f("ix_client_aggregate_id"), table_name="client")
    op.drop_index("idx_client_status", table_name="client")
    op.drop_index("idx_client_parent", table_name="client")
    op.drop_index("idx_client_name", table_name="client")
    op.drop_table("client")
    # ### end Alembic commands ###
